@using Microsoft.AspNetCore.Components.Web
@inject System.Net.Http.HttpClient Http

<div class="p-4">
    <div class="d-flex align-items-center mb-4">
        <div class="me-3">
            @if (Model.Id == 0)
            {
                <i class="fas fa-plus-circle fa-2x text-primary"></i>
            }
            else
            {
                <i class="fas fa-edit fa-2x text-info"></i>
            }
        </div>
        <h4 class="mb-0 fw-bold">
            @if (Model.Id == 0)
            {
                <span class="text-primary">Create New Todo</span>
            }
            else
            {
                <span class="text-info">Edit Todo</span>
            }
        </h4>
    </div>

    <div class="form-floating mb-3">
        <input class="form-control" id="titleInput" @bind="Model.Title" placeholder="Enter todo title..."/>
        <label for="titleInput">
            <i class="fas fa-tasks me-2"></i>Title *
        </label>
    </div>

    <div class="form-floating mb-3">
        <textarea class="form-control" id="descriptionInput" @bind="Model.Description"
                  placeholder="Enter description..." style="height: 100px"></textarea>
        <label for="descriptionInput">
            <i class="fas fa-align-left me-2"></i>Description
        </label>
    </div>

    <div class="form-check mb-4">
        <input class="form-check-input" type="checkbox" @bind="Model.IsDone" id="isDone"/>
        <label class="form-check-label fw-semibold" for="isDone">
            Mark as completed
        </label>
    </div>

    <div class="d-flex justify-content-between align-items-center">
        <button type="button" class="btn btn-secondary" @onclick="Cancel" disabled="@isSaving">
            <i class="fas fa-times me-2"></i>Cancel
        </button>
        <button type="button" class="btn btn-primary" @onclick="Save" disabled="@isSaving">
            @if (isSaving)
            {
                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true">
                    Saving...
                </span>
            }
            else
            {
                <i class="fas fa-save me-2"></i>
                @(Model.Id == 0 ? "Create Todo" : "Update Todo")
            }
        </button>
    </div>

    @if (!string.IsNullOrEmpty(message))
    {
        <div class="mt-3 alert @messageClass d-flex align-items-center" role="alert">
            @if (messageClass.Contains("success"))
            {
                <i class="fas fa-check-circle me-2"></i>
            }
            else if (messageClass.Contains("danger"))
            {
                <i class="fas fa-exclamation-circle me-2"></i>
            }
            else if (messageClass.Contains("warning"))
            {
                <i class="fas fa-exclamation-triangle me-2"></i>
            }
            else
            {
                <i class="fas fa-info-circle me-2"></i>
            }
            @message
        </div>
    }
</div>

@code {
    [Parameter] public int Id { get; set; } = 0;
    [Parameter] public EventCallback OnSaved { get; set; }
    [Parameter] public EventCallback OnCancelled { get; set; }

    TodoModel Model = new();

    string? message;
    string messageClass = "alert-info";
    bool isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        if (Id != 0)
        {
            var item = await Http.GetFromJsonAsync<TodoModel>($"api/todos/{Id}");
            if (item != null) Model = item;
        }
        else
        {
            Model = new TodoModel();
        }
    }

    async Task Save()
    {
        if (isSaving) return;
        isSaving = true;
        message = "Saving...";
        messageClass = "alert-info";
        StateHasChanged();

        try
        {
            if (string.IsNullOrWhiteSpace(Model.Title))
            {
                message = "Title is required.";
                messageClass = "alert-warning";
                return;
            }

            HttpResponseMessage res;
            if (Model.Id == 0)
            {
                var create = new { Title = Model.Title, Description = Model.Description, IsDone = Model.IsDone };
                res = await Http.PostAsJsonAsync("api/todos", create);
            }
            else
            {
                var update = new { Id = Model.Id, Title = Model.Title, Description = Model.Description, IsDone = Model.IsDone };
                res = await Http.PutAsJsonAsync($"api/todos/{Model.Id}", update);
            }

            if (res.IsSuccessStatusCode)
            {
                message = Model.Id == 0 ? "Todo created successfully!" : "Todo updated successfully!";
                messageClass = "alert-success";
                StateHasChanged();
                await Task.Delay(800);
                await OnSaved.InvokeAsync();
            }
            else
            {
                var body = await res.Content.ReadAsStringAsync();
                message = $"Request failed: {(int)res.StatusCode} {res.ReasonPhrase}. {body}";
                messageClass = "alert-danger";
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            messageClass = "alert-danger";
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    void Cancel()
    {
        _ = OnCancelled.InvokeAsync();
    }

    class TodoModel
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public string? Description { get; set; }
        public bool IsDone { get; set; }
        public DateTime CreatedAt { get; set; }
    }

}
